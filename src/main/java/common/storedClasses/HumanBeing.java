package common.storedClasses;


import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamOmitField;
import common.storedClasses.annotations.AutoGenerated;
import common.storedClasses.annotations.NotNull;
import common.storedClasses.enums.Mood;
import common.storedClasses.enums.WeaponType;
import common.storedClasses.forms.HumanBeingForm;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

@XStreamAlias("human")
public class HumanBeing implements Comparable<HumanBeing>, Checkable, Serializable {
    /**
     * stores ids that are busy
     */
    @XStreamOmitField
    public static Set<Long> ids = new HashSet<>();
    @XStreamOmitField
    private @AutoGenerated long id; //Значение поля должно быть больше 0, Значение этого поля должно быть уникальным, Значение этого поля должно генерироваться автоматически
    @XStreamOmitField
    private @AutoGenerated LocalDateTime creationDate;  //Поле не может быть null, Значение этого поля должно генерироваться автоматически
    private @NotNull String name; //Поле не может быть null, Строка не может быть пустой
    private @NotNull Coordinates coordinates; //Поле не может быть null
    private @NotNull Boolean realHero; //Поле не может быть null
    private Boolean hasToothpick; //Поле может быть null
    private Float impactSpeed; //Поле может быть null
    private @NotNull WeaponType weaponType; //Поле не может быть null
    private @NotNull Mood mood; //Поле не может быть null
    private Car car; //Поле может быть null

    /**
     * generates HumanBeing from HumanBeingForm
     */
    public HumanBeing() {
        this.creationDate = LocalDateTime.now();
        this.name = "test";
        this.coordinates = new Coordinates(1.0F, 123);
        this.realHero = true;
        this.hasToothpick = null;
        this.impactSpeed = null;
        this.weaponType = WeaponType.SHOTGUN;
        this.mood = Mood.CALM;
        this.car = null;
    }

    public HumanBeing(HumanBeingForm h) {
        this.name = h.getName();
        this.mood = h.getMood();
        this.weaponType = h.getWeaponType();
        this.realHero = h.getRealHero();
        this.coordinates = h.getCoordinates();
        this.impactSpeed = h.getImpactSpeed();
        this.hasToothpick = h.getHasToothPick();
        this.car = h.getCar();
        if (car != null) car.check();
        if (coordinates != null) coordinates.check();

        long newId = UUID.randomUUID().getLeastSignificantBits();
        while (ids.contains(newId)) {
            newId = UUID.randomUUID().getLeastSignificantBits();
        }
        id = newId;

        this.creationDate = LocalDateTime.now();
        this.check();
    }

    public void updId(long n) {
        this.id = n;
    }

    public void updateDate(LocalDateTime time) {
        this.creationDate = time;
    }

    /**
     * @return string
     */
    public String getName() {
        return name;
    }

    /**
     * @return Coordinates
     */
    public Coordinates getCoordinates() {
        return coordinates;
    }

    /**
     * @return id
     */
    public long getId() {
        return id;
    }

    /**
     * @return impactSpeed
     */
    public Float getImpactSpeed() {
        return impactSpeed;
    }

    public Boolean getHasToothpick() {
        return hasToothpick;
    }

    public Boolean getRealHero() {
        return realHero;
    }

    public String getCarName() {
        try {
            return car.getName();
        } catch (NullPointerException n) {
            return null;
        }
    }

    public Boolean getCarCool() {
        try {
            return car.getCool();
        } catch (NullPointerException n) {
            return null;
        }
    }

    public WeaponType getWeaponType() {
        return weaponType;
    }


    public String getStrTime() {
        return creationDate.toString();
    }

    /**
     * @return mood
     */
    public Mood getMood() {
        return mood;
    }


    /**
     * updates object (except id and creationDate)
     *
     * @param obj - new HumanBeing
     */
    public void update(HumanBeing obj) {
        this.name = obj.name;
        this.car = obj.car;
        this.coordinates = obj.coordinates;
        this.mood = obj.mood;
        this.realHero = obj.realHero;
        this.hasToothpick = obj.hasToothpick;
        this.impactSpeed = obj.impactSpeed;
        this.weaponType = obj.weaponType;
        HumanBeing.ids.remove(obj.id);
    }

    @Override
    public String toString() {
        return "HumanBeing {\n" +
                "\tid = " + id + "\n" +
                "\tname = " + name + "\n" +
                "\tcoordinates = " + coordinates + "\n" +
                "\tcreationDate = " + creationDate + "\n" +
                "\trealHero = " + realHero + "\n" +
                "\thasToothpick = " + hasToothpick + "\n" +
                "\timpactSpeed = " + impactSpeed + "\n" +
                "\tweaponType = " + weaponType + "\n" +
                "\tmood = " + mood + "\n" +
                "\tcar = " + car + "\n" +
                "}";

    }


    @Override
    public int compareTo(HumanBeing o) {
        return this.name.compareTo(o.name);
    }
}